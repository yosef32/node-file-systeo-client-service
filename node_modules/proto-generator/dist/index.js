"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
}
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
}
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const fs = __importStar(require("fs"));
const shelljs_1 = __importDefault(require("shelljs"));
exports.getProtoFile = (fileName, options) => __awaiter(this, void 0, void 0, function* () {
    if (!options.githubBranch)
        options.githubBranch = 'master';
    const dir = yield createFolder('./proto');
    const proto = yield axios_1.default.get(`https://raw.githubusercontent.com/${options.repositoryOwner}/${options.repository}/${options.githubBranch}/${options.githubProtoPath}`, (err) => {
        if (err)
            throw new Error(err);
    });
    const file = fs.promises.writeFile(`proto/${fileName}`, proto.data);
});
exports.generateProto = (protoPath) => __awaiter(this, void 0, void 0, function* () {
    try {
        const proto = yield createFolder('./proto');
        const generated = yield createFolder('./proto/generated');
        shelljs_1.default.exec(`grpc_tools_node_protoc --js_out=import_style=commonjs,binary:./proto/generated --grpc_out=./proto/generated -I ./proto ./${protoPath}`);
        shelljs_1.default.exec(`grpc_tools_node_protoc \
        --plugin=protoc-gen-ts=./node_modules/.bin/protoc-gen-ts \
        --ts_out=./proto/generated \
        -I ./proto \
        ./${protoPath}`);
    }
    catch (err) {
        throw new Error(err);
    }
});
const createFolder = (dir) => __awaiter(this, void 0, void 0, function* () {
    fs.mkdir(dir, err => {
        if (err && err.code != 'EEXIST')
            throw new Error(`Failed to create ${dir} directory: ${err}`);
    });
});
